// Generated by CoffeeScript 1.7.1
(function() {
  var $, PostableListView, PostableView, get_info, h, make_editable_description, root, rwmap, w,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $ = jQuery;

  h = teacup;

  w = widgets;

  rwmap = function(boolrw) {
    if (boolrw === true) {
      return "read and post";
    } else {
      return "read only";
    }
  };

  PostableView = (function(_super) {
    __extends(PostableView, _super);

    function PostableView() {
      this.removeMember = __bind(this.removeMember, this);
      this.clickedToggle = __bind(this.clickedToggle, this);
      this.render = __bind(this.render, this);
      return PostableView.__super__.constructor.apply(this, arguments);
    }

    PostableView.prototype.tagName = "tr";

    PostableView.prototype.events = {
      "click .yesbtn": "clickedToggle",
      "click .removemember": "removeMember"
    };

    PostableView.prototype.initialize = function(options) {
      return this.rwmode = options.rwmode, this.memberable = options.memberable, this.fqpn = options.fqpn, this.owner = options.owner, this.username = options.username, this.ownerfqin = options.ownerfqin, options;
    };

    PostableView.prototype.render = function() {
      var content, uname;
      if (!this.owner) {
        uname = this.username;
        if (this.username === 'group:public') {
          uname = "All ADS Users";
        }
        if (this.username === 'anonymouse') {
          uname = "General Public";
        }
        content = w.table_from_dict_partial(uname, "Only owner can see this.");
      } else {
        if (this.ownerfqin === this.memberable) {
          content = w.table_from_dict_partial_many(this.username + " (owner)", [rwmap(this.rwmode), ""]);
        } else {
          uname = this.username;
          if (this.username === 'group:public') {
            uname = "All ADS Users";
          }
          if (this.username !== 'anonymouse') {
            content = w.table_from_dict_partial_many(uname, [w.single_button_label(rwmap(this.rwmode), "Toggle"), '<a class="removemember" style="cursor:pointer;"><span class="i badge badge-important">x</span></a>']);
          } else {
            uname = "General Public";
            content = w.table_from_dict_partial_many(uname, [rwmap(this.rwmode), '<a class="removemember" style="cursor:pointer;"><span class="i badge badge-important">x</span></a>']);
          }
        }
      }
      this.$el.html(content);
      return this;
    };

    PostableView.prototype.clickedToggle = function() {
      var cback, eback, loc;
      loc = window.location;
      cback = function(data) {
        return window.location = location;
      };
      eback = function(xhr, etext) {
        return alert('Did not succeed');
      };
      return syncs.toggle_rw(this.memberable, this.fqpn, cback, eback);
    };

    PostableView.prototype.removeMember = function() {
      var cback, eback, loc, membable, memberable;
      membable = this.fqpn;
      memberable = this.memberable;
      loc = window.location;
      cback = (function(_this) {
        return function(data) {
          return window.location = loc;
        };
      })(this);
      eback = (function(_this) {
        return function(xhr, etext) {
          return alert('Did not succeed');
        };
      })(this);
      syncs.remove_memberable_from_membable(memberable, membable, cback, eback);
      return false;
    };

    return PostableView;

  })(Backbone.View);

  PostableListView = (function(_super) {
    __extends(PostableListView, _super);

    function PostableListView() {
      this.render = __bind(this.render, this);
      return PostableListView.__super__.constructor.apply(this, arguments);
    }

    PostableListView.prototype.initialize = function(options) {
      this.$el = options.$e_el;
      this.fqpn = options.fqpn;
      this.users = options.users;
      this.owner = options.owner;
      return this.ownerfqin = options.ownerfqin;
    };

    PostableListView.prototype.render = function() {
      var $widget, rendered, u, v, views;
      views = (function() {
        var _results;
        _results = [];
        for (u in this.users) {
          _results.push(new PostableView({
            rwmode: this.users[u][1],
            fqpn: this.fqpn,
            memberable: u,
            username: this.users[u][0],
            owner: this.owner,
            ownerfqin: this.ownerfqin
          }));
        }
        return _results;
      }).call(this);
      rendered = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          v = views[_i];
          _results.push(v.render().el);
        }
        return _results;
      })();
      if (!this.owner) {
        $widget = w.$table_from_dict("User", "Access", rendered);
      } else {
        $widget = w.$table_from_dict_many("User", ["Access", "Remove"], rendered);
      }
      this.$el.append($widget);
      return this;
    };

    return PostableListView;

  })(Backbone.View);

  make_editable_description = function($infodiv, fqpn) {
    var cback, eback;
    cback = function() {};
    eback = function() {};
    $.fn.editable.defaults.mode = 'inline';
    $infodiv.find('.edtext').editable({
      type: 'textarea',
      rows: 2,
      url: function(params) {
        return syncs.change_description(params.value, fqpn, cback, eback);
      }
    });
    return $infodiv.find('.edclick').click(function(e) {
      e.stopPropagation();
      e.preventDefault();
      return $infodiv.find('.edtext').editable('toggle');
    });
  };

  get_info = function(sections, config) {
    var cback, eback;
    $.get(config.infoURL, function(data) {
      var content, ownerfqin;
      content = views.library_info(config.owner, data, templates.library_info);
      ownerfqin = data.library.owner;
      sections.$infodiv.append(content);
      if (config.owner) {
        make_editable_description(sections.$infodiv, config.fqpn);
      }
      sections.$infodiv.show();
      if (config.useras_nick !== 'anonymouse') {
        return $.get(config.membersURL, function(data) {
          var helptext, plinv, viewp;
          plinv = new PostableListView({
            users: data.users,
            fqpn: config.fqpn,
            owner: config.owner,
            ownerfqin: ownerfqin,
            $e_el: sections.$membersdiv
          });
          plinv.render();
          sections.$membersdiv.show();
          if (config.owner) {
            helptext = "Remove user or group from library. If you have made the library public, you will see two users: 'General Public' and 'All ADS users'. Removing the former will revert the library link to being visible only by ADS users. Removing the latter will stop other ADS users from being able to post to this library (in the event that you allowed that) even while the library is visible to the general public.";
            w.decohelp('.Remove', helptext, 'popover', 'left');
            viewp = new views.MakePublic({
              postable: config.fqpn,
              users: data.users
            });
            sections.$makepublicform.append(viewp.render().$el);
            sections.$makepublicform.show();
            return $.get(config.guiURL, function(data) {
              var groups, view;
              groups = data.groups;
              view = new views.AddGroup({
                postable: config.fqpn,
                groups: groups,
                withcb: true
              });
              sections.$invitedform.append(view.render().$el);
              sections.$invitedform.show();
              return $.get(config.invitedsURL, function(data) {
                content = views.postable_inviteds(config.fqpn, data, templates.postable_inviteds, false);
                sections.$invitedsdiv.append(content);
                return sections.$invitedsdiv.show();
              });
            });
          }
        });
      } else {
        sections.$membersdiv.empty().append("<p>Only logged in users can see members!</p>");
        return sections.$membersdiv.show();
      }
    });
    cback = function() {
      return window.location = config.postablesURL;
    };
    eback = function() {
      return alert("An error occurred in deletion");
    };
    return $('#postabledeleter').click(function(e) {
      e.preventDefault();
      return syncs.delete_membable(config.fqpn, cback, eback);
    });
  };

  root.libraryprofile = {
    PostableView: PostableView,
    PostableListView: PostableListView,
    get_info: get_info
  };

}).call(this);
