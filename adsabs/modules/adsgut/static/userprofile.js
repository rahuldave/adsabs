// Generated by CoffeeScript 1.7.1
(function() {
  var $, Postable, PostableList, PostableListView, PostableView, getgroup, getlib, h, layout_userprofile, lmap, make_postable_link, make_postable_link_secondary, parse_fqin, parse_userinfo, prefix, render_postable, root, rwmap, w,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  $ = jQuery;

  h = teacup;

  w = widgets;

  prefix = GlobalVariables.ADS_PREFIX + "/adsgut";

  parse_fqin = function(fqin) {
    var vals;
    vals = fqin.split(':');
    return vals[-1 + vals.length];
  };

  parse_userinfo = function(data) {
    var e, ele, groupsin, groupsinvitedto, groupsowned, librariesin, librariesinvitedto, librariesowned, p, pinfqin, postablesin, postablesinvitedto, postablesowned, powfqin, privatelib, publicgroup, publiclib, userdict, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3;
    publicgroup = "adsgut/group:public";
    publiclib = "adsgut/library:public";
    privatelib = data.user.nick + "/library:default";
    postablesin = [];
    postablesowned = data.user.postablesowned;
    powfqin = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = postablesowned.length; _i < _len; _i++) {
        p = postablesowned[_i];
        _results.push(p.fqpn);
      }
      return _results;
    })();
    pinfqin = (function() {
      var _i, _len, _ref, _results;
      _ref = data.user.postablesin;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.fqpn);
      }
      return _results;
    })();
    pinfqin = _.difference(pinfqin, powfqin);
    _ref = data.user.postablesin;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      if (_ref1 = p.fqpn, __indexOf.call(pinfqin, _ref1) >= 0) {
        postablesin.push(p);
      }
    }
    postablesinvitedto = data.user.postablesinvitedto;
    groupsin = (function() {
      var _j, _len1, _ref2, _results;
      _results = [];
      for (_j = 0, _len1 = postablesin.length; _j < _len1; _j++) {
        e = postablesin[_j];
        if (e.ptype === 'group' && ((_ref2 = e.fqpn) !== publicgroup)) {
          _results.push(e);
        }
      }
      return _results;
    })();
    groupsowned = (function() {
      var _j, _len1, _ref2, _results;
      _results = [];
      for (_j = 0, _len1 = postablesowned.length; _j < _len1; _j++) {
        e = postablesowned[_j];
        if (e.ptype === 'group' && ((_ref2 = e.fqpn) !== publicgroup)) {
          _results.push(e);
        }
      }
      return _results;
    })();
    groupsinvitedto = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = postablesinvitedto.length; _j < _len1; _j++) {
        e = postablesinvitedto[_j];
        if (e.ptype === 'group') {
          _results.push(e);
        }
      }
      return _results;
    })();
    userdict = {
      groupsin: groupsin,
      groupsowned: groupsowned,
      groupsinvitedto: groupsinvitedto,
      userinfo: {
        nick: data.user.nick,
        email: data.user.adsid,
        whenjoined: data.user.basic.whencreated,
        name: data.user.basic.name
      }
    };
    librariesin = (function() {
      var _j, _len1, _ref2, _results;
      _results = [];
      for (_j = 0, _len1 = postablesin.length; _j < _len1; _j++) {
        e = postablesin[_j];
        if (e.ptype === 'library' && ((_ref2 = e.fqpn) !== publiclib && _ref2 !== privatelib)) {
          _results.push(e);
        }
      }
      return _results;
    })();
    librariesowned = (function() {
      var _j, _len1, _ref2, _results;
      _results = [];
      for (_j = 0, _len1 = postablesowned.length; _j < _len1; _j++) {
        e = postablesowned[_j];
        if (e.ptype === 'library' && ((_ref2 = e.fqpn) !== publiclib && _ref2 !== privatelib)) {
          _results.push(e);
        }
      }
      return _results;
    })();
    librariesinvitedto = (function() {
      var _j, _len1, _ref2, _results;
      _results = [];
      for (_j = 0, _len1 = postablesinvitedto.length; _j < _len1; _j++) {
        e = postablesinvitedto[_j];
        if (e.ptype === 'library' && ((_ref2 = e.fqpn) !== publiclib && _ref2 !== privatelib)) {
          _results.push(e);
        }
      }
      return _results;
    })();
    for (_j = 0, _len1 = librariesin.length; _j < _len1; _j++) {
      ele = librariesin[_j];
      ele.reason = '';
    }
    for (_k = 0, _len2 = groupsin.length; _k < _len2; _k++) {
      ele = groupsin[_k];
      ele.reason = '';
    }
    for (_l = 0, _len3 = librariesowned.length; _l < _len3; _l++) {
      ele = librariesowned[_l];
      ele.reason = '';
    }
    for (_m = 0, _len4 = librariesinvitedto.length; _m < _len4; _m++) {
      ele = librariesinvitedto[_m];
      ele.reason = '';
    }
    userdict.librariesowned = librariesowned;
    userdict.librariesinvitedto = librariesinvitedto;
    userdict.librariesin = [];
    _ref2 = data.postablelibs;
    for (_n = 0, _len5 = _ref2.length; _n < _len5; _n++) {
      ele = _ref2[_n];
      if (ele.reason !== '') {
        ele.reason = " (through " + ele.reason + ")";
      }
      if (ele.reason !== " (through group:public)" && (_ref3 = ele.fqpn, __indexOf.call(powfqin, _ref3) < 0)) {
        userdict.librariesin.push(ele);
      }
    }
    return userdict;
  };

  getlib = function(fqin) {
    var pre, vals;
    vals = fqin.split(':');
    pre = vals[0].split('/');
    return pre[0] + "/library:" + vals[vals.length - 1];
  };

  getgroup = function(fqin) {
    var pre, vals;
    vals = fqin.split(':');
    pre = vals[0].split('/');
    return pre[0] + "/group:" + vals[vals.length - 1];
  };

  make_postable_link = h.renderable(function(fqpn, libmode, ownermode) {
    if (libmode == null) {
      libmode = false;
    }
    if (ownermode == null) {
      ownermode = false;
    }
    if (libmode === "lib") {
      return h.a({
        href: prefix + ("/postable/" + fqpn + "/filter/html")
      }, function() {
        return h.text(parse_fqin(fqpn));
      });
    } else if (libmode === "group") {
      return h.a({
        href: prefix + ("/postable/" + (getlib(fqpn)) + "/filter/html")
      }, function() {
        return h.text(parse_fqin(fqpn));
      });
    } else {
      return h.a({
        href: prefix + ("/postable/" + fqpn + "/filter/html")
      }, function() {
        return h.text(parse_fqin(fqpn));
      });
    }
  });

  make_postable_link_secondary = h.renderable(function(fqpn, libmode, ownermode, text) {
    if (libmode == null) {
      libmode = false;
    }
    if (ownermode == null) {
      ownermode = false;
    }
    if (text == null) {
      text = false;
    }
    if (libmode === "lib") {
      return h.a({
        href: prefix + ("/postable/" + fqpn + "/profile/html")
      }, function() {
        if (text) {
          return h.text(text);
        } else {
          h.i(".icon-cog");
          h.raw("&nbsp;");
          if (ownermode) {
            return h.text("admin");
          } else {
            return h.text("info");
          }
        }
      });
    } else if (libmode === "group") {
      return h.a({
        href: prefix + ("/postable/" + fqpn + "/profile/html")
      }, function() {
        if (text) {
          return h.text(text);
        } else {
          h.i(".icon-cog");
          h.raw("&nbsp;");
          if (ownermode) {
            return h.text("admin");
          } else {
            return h.text("info");
          }
        }
      });
    } else {
      return h.a({
        href: prefix + ("/postable/" + fqpn + "/profile/html")
      }, function() {
        return h.text(parse_fqin(fqpn));
      });
    }
  });

  lmap = {
    lib: 'Libraries',
    group: 'Groups'
  };

  Postable = (function(_super) {
    __extends(Postable, _super);

    function Postable() {
      return Postable.__super__.constructor.apply(this, arguments);
    }

    return Postable;

  })(Backbone.Model);

  PostableView = (function(_super) {
    __extends(PostableView, _super);

    function PostableView() {
      this.removeMember = __bind(this.removeMember, this);
      this.clickedYes = __bind(this.clickedYes, this);
      this.render = __bind(this.render, this);
      return PostableView.__super__.constructor.apply(this, arguments);
    }

    PostableView.prototype.tagName = "tr";

    PostableView.prototype.events = {
      "click .yesbtn": "clickedYes",
      "click .removemember": "removeMember"
    };

    PostableView.prototype.initialize = function(options) {
      this.libmode = options.libmode;
      this.ownermode = options.ownermode;
      return this.listtype = options.listtype;
    };

    PostableView.prototype.render = function() {
      var content, libmode, more, ownermode;
      more = "";
      if (this.model.get('librarykind') === 'group') {
        more = this.model.get('librarykind');
        if (!this.model.get('invite')) {
          more = make_postable_link_secondary(getgroup(this.model.get('fqpn')), libmode = this.libmode, ownermode = this.ownermode, more);
        }
      }
      if (this.model.get('islibrarypublic') === true) {
        more = more + '(Public)';
      }
      if (this.model.get('invite')) {
        if (this.libmode === "lib") {
          this.$el.html(w.table_from_dict_partial_many(parse_fqin(this.model.get('fqpn')), [this.model.get('owner'), this.model.get('description'), more, this.model.get('readwrite'), w.single_button('Yes')]));
        } else {
          this.$el.html(w.table_from_dict_partial_many(parse_fqin(this.model.get('fqpn')), [this.model.get('owner'), this.model.get('description'), w.single_button('Yes')]));
        }
      } else {
        if (this.libmode === "lib") {
          if (this.listtype === 'in') {
            content = w.table_from_dict_partial_many(make_postable_link(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode) + this.model.get('reason'), [this.model.get('owner'), this.model.get('description'), more, this.model.get('readwrite'), make_postable_link_secondary(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode), '<a class="removemember" style="cursor:pointer;"><span class="i badge badge-important">x</span></a>']);
          } else {
            content = w.table_from_dict_partial_many(make_postable_link(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode) + this.model.get('reason'), [this.model.get('owner'), this.model.get('description'), more, this.model.get('readwrite'), make_postable_link_secondary(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode)]);
          }
        } else {
          if (this.listtype === 'in') {
            content = w.table_from_dict_partial_many(make_postable_link(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode), [this.model.get('owner'), this.model.get('description'), make_postable_link_secondary(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode), '<a class="removemember" style="cursor:pointer;"><span class="i badge badge-important">x</span></a>']);
          } else {
            content = w.table_from_dict_partial_many(make_postable_link(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode), [this.model.get('owner'), this.model.get('description'), make_postable_link_secondary(this.model.get('fqpn'), libmode = this.libmode, ownermode = this.ownermode)]);
          }
        }
        this.$el.html(content);
      }
      return this;
    };

    PostableView.prototype.clickedYes = function() {
      var cback, eback, loc, useremail;
      loc = window.location;
      cback = function(data) {
        return window.location = location;
      };
      eback = function(xhr, etext) {
        return alert('Did not succeed');
      };
      useremail = this.model.get('email');
      return syncs.accept_invitation(useremail, this.model.get('fqpn'), cback, eback);
    };

    PostableView.prototype.removeMember = function() {
      var cback, eback, loc, membable, memberable;
      membable = this.model.get('fqpn');
      memberable = this.model.get('fqin');
      loc = window.location;
      cback = (function(_this) {
        return function(data) {
          console.log(loc);
          return window.location = loc;
        };
      })(this);
      eback = (function(_this) {
        return function(xhr, etext) {
          return alert('Did not succeed');
        };
      })(this);
      syncs.remove_memberable_from_membable(memberable, membable, cback, eback);
      return false;
    };

    return PostableView;

  })(Backbone.View);

  PostableList = (function(_super) {
    __extends(PostableList, _super);

    function PostableList() {
      return PostableList.__super__.constructor.apply(this, arguments);
    }

    PostableList.prototype.model = Postable;

    PostableList.prototype.initialize = function(models, options) {
      this.listtype = options.listtype;
      this.invite = options.invite;
      this.nick = options.nick;
      this.email = options.email;
      return this.fqin = options.fqin;
    };

    return PostableList;

  })(Backbone.Collection);

  PostableListView = (function(_super) {
    __extends(PostableListView, _super);

    function PostableListView() {
      this.render = __bind(this.render, this);
      return PostableListView.__super__.constructor.apply(this, arguments);
    }

    PostableListView.prototype.tmap = {
      "in": "I am in",
      ow: "I own",
      iv: "I am invited to"
    };

    PostableListView.prototype.initialize = function(options) {
      this.$el = options.$e_el;
      this.libmode = options.libmode;
      return this.ownermode = options.ownermode;
    };

    PostableListView.prototype.render = function() {
      var $widget, m, rendered, v, views;
      views = (function() {
        var _i, _len, _ref, _results;
        _ref = this.collection.models;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          m = _ref[_i];
          _results.push(new PostableView({
            model: m,
            libmode: this.libmode,
            ownermode: this.ownermode,
            listtype: this.collection.listtype
          }));
        }
        return _results;
      }).call(this);
      rendered = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          v = views[_i];
          _results.push(v.render().el);
        }
        return _results;
      })();
      if (this.collection.invite) {
        if (views.length === 0) {
          rendered = ["<td colspan=6>No Invitations</td>"];
        }
        if (this.libmode === 'group') {
          $widget = w.$table_from_dict_many(lmap[this.libmode] + ' ' + this.tmap[this.collection.listtype], ["Owner", "Description", "Accept?"], rendered);
        } else if (this.libmode === 'lib') {
          $widget = w.$table_from_dict_many(lmap[this.libmode] + ' ' + this.tmap[this.collection.listtype], ["Owner", "Description", "More", "Access", "Accept?"], rendered);
        }
      } else {
        if (views.length === 0) {
          if (this.collection.listtype !== 'in') {
            rendered = ["<td colspan=6>None</td>"];
          } else {
            rendered = ["<td colspan=7>None</td>"];
          }
        }
        if (this.libmode === 'group') {
          if (this.collection.listtype !== 'in') {
            $widget = w.$table_from_dict_many(lmap[this.libmode] + ' ' + this.tmap[this.collection.listtype], ["Owner", "Description", "Manage"], rendered);
          } else {
            $widget = w.$table_from_dict_many(lmap[this.libmode] + ' ' + this.tmap[this.collection.listtype], ["Owner", "Description", "Manage", "Leave"], rendered);
          }
        } else if (this.libmode === 'lib') {
          if (this.collection.listtype !== 'in') {
            $widget = w.$table_from_dict_many(lmap[this.libmode] + ' ' + this.tmap[this.collection.listtype], ["Owner", "Description", "More", "Access", "Manage"], rendered);
          } else {
            $widget = w.$table_from_dict_many(lmap[this.libmode] + ' ' + this.tmap[this.collection.listtype], ["Owner", "Description", "More", "Access", "Manage", "Leave"], rendered);
          }
        }
      }
      this.$el.append($widget);
      return this;
    };

    return PostableListView;

  })(Backbone.View);

  rwmap = function(boolrw) {
    if (boolrw === true) {
      return "read and post";
    } else {
      return "read only";
    }
  };

  render_postable = function(userdict, plist, $pel, ptype, invite, libmode, ownermode) {
    var p, plin, plinv;
    plin = new PostableList([], {
      listtype: ptype,
      invite: invite,
      nick: userdict.nick,
      email: userdict.email,
      fqin: "adsgut/user:" + userdict.name
    });
    if (libmode === "lib") {
      plin.add((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = plist.length; _i < _len; _i++) {
          p = plist[_i];
          _results.push(new Postable({
            fqpn: p.fqpn,
            owner: p.owner,
            description: p.description,
            reason: p.reason,
            islibrarypublic: p.islibrarypublic,
            librarykind: p.librarykind,
            readwrite: rwmap(p.readwrite),
            invite: plin.invite,
            nick: plin.nick,
            email: plin.email,
            fqin: plin.fqin
          }));
        }
        return _results;
      })());
    } else {
      plin.add((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = plist.length; _i < _len; _i++) {
          p = plist[_i];
          _results.push(new Postable({
            fqpn: p.fqpn,
            owner: p.owner,
            description: p.description,
            readwrite: rwmap(p.readwrite),
            invite: plin.invite,
            nick: plin.nick,
            email: plin.email,
            fqin: plin.fqin
          }));
        }
        return _results;
      })());
    }
    plinv = new PostableListView({
      collection: plin,
      $e_el: $pel,
      libmode: libmode,
      ownermode: ownermode
    });
    return plinv.render();
  };

  layout_userprofile = function(sections, config, ptype) {
    var $create, $in, $info, $invited, $owned, udgHtmlURL, userInfoURL, viewl, wordmap, wordmap_singular;
    $create = sections.$create, $info = sections.$info, $owned = sections.$owned, $in = sections.$in, $invited = sections.$invited;
    userInfoURL = config.userInfoURL, udgHtmlURL = config.udgHtmlURL;
    wordmap = {
      lib: "libraries",
      group: "groups"
    };
    wordmap_singular = {
      lib: "library",
      group: "group"
    };
    viewl = new views.CreatePostable({
      postabletype: wordmap_singular[ptype]
    });
    $create.append(viewl.render().$el);
    return $.get(userInfoURL, function(data) {
      var inlist, userdict;
      userdict = parse_userinfo(data);
      render_postable(userdict.userinfo, userdict["" + wordmap[ptype] + "owned"], $owned, 'ow', false, ptype, true);
      if (ptype === 'lib') {
        inlist = userdict.librariesin;
      } else {
        inlist = userdict["" + wordmap[ptype] + "in"];
      }
      render_postable(userdict.userinfo, inlist, $in, 'in', false, ptype, false);
      render_postable(userdict.userinfo, userdict["" + wordmap[ptype] + "invitedto"], $invited, 'iv', true, ptype, false);
      if (ptype === 'lib') {
        w.decohelp('.LibrariesIamin', "Others' libraries I have access to due to being in them or due to being in groups that are in them", 'popover', 'left');
        w.decohelp('.LibrariesIown', 'Libraries I have created', 'popover', 'left');
        w.decohelp('.LibrariesIaminvitedto', "Outstanding invitations to join other ADS users' libraries", 'popover', 'left');
        return w.decohelp('.Access', '"read and post" if i can post items to the library, "read only" if I can only view items in the library', 'popover', 'top');
      } else if (ptype === 'group') {
        w.decohelp('.GroupsIamin', 'Groups owned by others that I am a member of', 'popover', 'left');
        w.decohelp('.GroupsIown', 'Groups I have created', 'popover', 'left');
        return w.decohelp('.GroupsIaminvitedto', "Outstanding invitations to join other ADS users' groups", 'popover', 'left');
      }
    });
  };

  root.userprofile = {
    layout_userprofile: layout_userprofile
  };

}).call(this);
